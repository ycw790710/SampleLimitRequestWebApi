/*
 * SampleLimitRequestWebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RequestRateLimitStatusInfo
    /// </summary>
    [DataContract(Name = "RequestRateLimitStatusInfo")]
    public partial class RequestRateLimitStatusInfo : IEquatable<RequestRateLimitStatusInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestRateLimitStatusInfo" /> class.
        /// </summary>
        /// <param name="containerTypeInfos">containerTypeInfos.</param>
        /// <param name="perUnitInfos">perUnitInfos.</param>
        public RequestRateLimitStatusInfo(List<RequestRateLimitStatusContainerTypeInfo> containerTypeInfos = default(List<RequestRateLimitStatusContainerTypeInfo>), Dictionary<string, RequestRateLimitStatusPerTimeUnitInfo> perUnitInfos = default(Dictionary<string, RequestRateLimitStatusPerTimeUnitInfo>))
        {
            this.ContainerTypeInfos = containerTypeInfos;
            this.PerUnitInfos = perUnitInfos;
        }

        /// <summary>
        /// Gets or Sets ContainerTypeInfos
        /// </summary>
        [DataMember(Name = "containerTypeInfos", EmitDefaultValue = true)]
        public List<RequestRateLimitStatusContainerTypeInfo> ContainerTypeInfos { get; set; }

        /// <summary>
        /// Gets or Sets PerUnitInfos
        /// </summary>
        [DataMember(Name = "perUnitInfos", EmitDefaultValue = true)]
        public Dictionary<string, RequestRateLimitStatusPerTimeUnitInfo> PerUnitInfos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestRateLimitStatusInfo {\n");
            sb.Append("  ContainerTypeInfos: ").Append(ContainerTypeInfos).Append("\n");
            sb.Append("  PerUnitInfos: ").Append(PerUnitInfos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestRateLimitStatusInfo);
        }

        /// <summary>
        /// Returns true if RequestRateLimitStatusInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestRateLimitStatusInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestRateLimitStatusInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContainerTypeInfos == input.ContainerTypeInfos ||
                    this.ContainerTypeInfos != null &&
                    input.ContainerTypeInfos != null &&
                    this.ContainerTypeInfos.SequenceEqual(input.ContainerTypeInfos)
                ) && 
                (
                    this.PerUnitInfos == input.PerUnitInfos ||
                    this.PerUnitInfos != null &&
                    input.PerUnitInfos != null &&
                    this.PerUnitInfos.SequenceEqual(input.PerUnitInfos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerTypeInfos != null)
                {
                    hashCode = (hashCode * 59) + this.ContainerTypeInfos.GetHashCode();
                }
                if (this.PerUnitInfos != null)
                {
                    hashCode = (hashCode * 59) + this.PerUnitInfos.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
